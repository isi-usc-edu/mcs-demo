Docmenting some of the filtering methods used in mongo:


// Find unique HIT IDs in the trials database
db.trials.distinct("hit_id", { "hit_id": {$exists:true} })

// Example of OR filtering logic
db.trials.find({"$or": [{"hit_id": "1"}, {"hit_id": "2"}] })

// update a document
db.trials.update({"hit_id": {$exists: true}, "scenario": {$exists: false} }, {}, {upsert: false})


// Match, aggregate and sort nuumber of trials per scenario
db.trials.aggregate([ { "$match": { "scenario": { "$exists": true, "$ne": "" }}}, {"$group": {"_id": "$scenario", "count": { "$sum": 1 }}}, { $sort: { "count": -1 }} ])


// Aggregate and match example
db.collection.aggregate([
    { "$group": {
        "_id": "$field",
        "count": { "$sum": 1 }
    }},
    { "$match": {
        "count": { "$gt": 1 }
    }}
])

// valid hit ids from both january and july
hit_ids = [
'39HYCOOPLR4W0064OWWAQNWAINTMDG',
'31KSVEGZ47BM6MJNAZXH4AF5VQVRWF',
'3K8CQCU3LHK1RORVHSG0VQAVUT7WNX',
'3MXX6RQ9FYOPL7KON1N94NWZAF9P40',
'3GL25Y6856DAY6BLFWXMKUZ2Y53MXG',
'3TUOHPJXZKG63I5ZJY39TS1TW7HWXH',
'3IYI9285XVJWU0U5L3O7QPMBTUFJC4',
'31SIZS5W6CYHMPN1YQYBCLXJ7PGRQD',
'3XEIP58NM36FXJTFG2KSH20O615ZLK',
'3XWUWJ18UO91UAMZJTDLRXHSQH4UUS',
'3AJA9FLWTFH721U9UNT8MUSEM2VIF8',
'3NZ1E5QA72K5DWNEI1OIEVXO2KG5BQ',
'3D7VY91L78G3L38KA054VX8AODNMBA',
'31YWE12TF3VRD34YBQVX1C2CCON7XU',
'37Y5RYYI1SODW1OQZTT8W3Y8Z2ZXS6',
'3Y40HMYLM41TBEGUOYO8B4GWKZKXUM',
'3U18MJKL2X5SDQLQ01GZJW3SBLYCN2',
]

// input 1 examples
input1 = [
'roses are red',
'Basketball is not non-sports',
'Cars are manufactured by factory workers',
'Some fish are mammals',
'We have lunch before dinner',
'Sushi is Japanese food',
]

// input 2 examples
input2 = [
'roses are blue',
'Singing is not non-sports',
'Factory workers are manufactured by cars',
'All fish are mammals',
'We have dinner before lunch',
'Tofu is American food',
]

// find all trials that are with valid hit id and not in list of examples
trials = db.trials.find({
  $and: [
    {hit_id: {$in: hit_ids}},
    {evalQ1: {$exists: true}},
    {evalQ2: {$exists: true}},
    {evalQ3: {$exists: true}}
  ]
}).toArray()

// filter for s1 !== s2 after lower casing both inputs
trials = trials.filter(x => x['s1']['input'].toLowerCase() !== x['s2']['input'].toLowerCase() && ( input1.indexOf(x['s1']['input']) === -1 || input2.indexOf(x['s2']['input']) === -1 ) )

// get all trials as mongo db objects after filtering
obj_ids = trials.map(x=> x['_id'])
db.trials.find({_id: {$in: obj_ids} }).count()

// get all unique worker ids from the valid trials
workers = db.trials.distinct('worker_id', {_id: {$in: obj_ids} })

// get all exit survey completed by the workers from valid trials
db.survey.find({worker_id: {$in: workers}}).count()

